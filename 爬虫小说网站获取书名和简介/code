# -*- codeing = utf-8 -*-
from bs4 import BeautifulSoup  # 网页解析，获取数据
import re  # 正则表达式，进行文字匹配`
import urllib.request, urllib.error  # 制定URL，获取网页数据
import xlwt  # 进行excel操作
#import sqlite3  # 进行SQLite数据库操作

#findLink = re.compile(r'<a href="(.*?)">')  # 创建正则表达式对象，标售规则   影片详情链接的规则
#findImgSrc = re.compile(r'<img.*src="(.*?)"', re.S) #电影图片链接
find_book_name = re.compile(r'<h4 class="bookname"><a href="(.*)">(.*)</a></h4>',re.S) #书的链接 书的名字
find_introduction=re.compile(r'<meta property="og:description" content="(.*?)" />',re.S) #书的简介


#findRating = re.compile(r'<span class="rating_num" property="v:average">(.*)</span>') #评分
#findJudge = re.compile(r'<span>(\d*)人评价</span>')
#findInq = re.compile(r'<span class="inq">(.*)</span>')
#findBd = re.compile(r'<p class="">(.*?)</p>', re.S)



def main():
    baseurl = "https://www.po18m.com/sort/0/"  #要爬取的网页链接
    # 1.爬取网页
    datalist = getData(baseurl)
    savepath = "xxxx.xls"    #当前目录新建XLS，存储进去
    # dbpath = "movie.db"              #当前目录新建数据库，存储进去
    # 3.保存数据
    saveData(datalist,savepath)      #2种存储方式可以只选择一种
    # saveData2DB(datalist,dbpath)



# 爬取网页
def getData(baseurl):
    count=0
    datalist = []  #用来存储爬取的网页信息
    for i in range(1,100):  # 调用获取页面信息的函数，10次
        url = baseurl + str(i)+'.html'
        html = askURL(url)  # 保存获取到的网页源码
        # 2.逐一解析数据
        soup = BeautifulSoup(html, "html.parser")
        for item in soup.find_all('div', class_="bookbox"):  # 查找符合要求的字符串
            data = []  # 保存一部电影所有信息
            item = str(item)
            name=re.findall(find_book_name,item)[0][1]
            namelink=re.findall(find_book_name,item)[0][0]
            html2=askURL(namelink)
            introduction=re.findall(find_introduction,html2)
            data.append(name)
            if len(introduction)!=0:
                data.append(introduction[0])
            else:
                data.append('')
            data.append(namelink)
            count=count+1
            print(count,end=' ')
            datalist.append(data)

    return datalist


# 得到指定一个URL的网页内容
def askURL(url):
    head = {  # 模拟浏览器头部信息，向豆瓣服务器发送消息
        "User-Agent": "Mozilla / 5.0(Windows NT 10.0; Win64; x64) AppleWebKit / 537.36(KHTML, like Gecko) Chrome / 80.0.3987.122  Safari / 537.36"
    }
    # 用户代理，表示告诉豆瓣服务器，我们是什么类型的机器、浏览器（本质上是告诉浏览器，我们可以接收什么水平的文件内容）

    request = urllib.request.Request(url, headers=head)
    html = ""
    try:
        response = urllib.request.urlopen(request)
        html = response.read().decode("utf-8",errors="ignore")
    except urllib.error.URLError as e:
        if hasattr(e, "code"):
            print(e.code)
        if hasattr(e, "reason"):
            print(e.reason)
    return html


# 保存数据到表格
def saveData(datalist,savepath):
    print("save.......")
    book = xlwt.Workbook(encoding="utf-8",style_compression=0) #创建workbook对象
    sheet = book.add_sheet('po18', cell_overwrite_ok=True) #创建工作表
    col = ("书名","简介","链接")
    for i in range(0,3):
        sheet.write(0,i,col[i])  #列名
    for i in range(len(datalist)):
        # print("第%d条" %(i+1))       #输出语句，用来测试
        data = datalist[i]
        for j in range(0,3):
            sheet.write(i+1,j,data[j])  #数据
    book.save(savepath) #保存

